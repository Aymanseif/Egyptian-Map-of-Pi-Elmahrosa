apiVersion: v1
kind: List
items:
# 1. Prometheus ConfigMap containing core configuration
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus-config
    namespace: monitoring
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring
  data:
    prometheus.yml: |
      global:
        scrape_interval: 15s     # Default scrape interval for all targets
        evaluation_interval: 15s  # How frequently to evaluate rules
        scrape_timeout: 10s      # Timeout for scrape requests
        
      # Rule files for alerts and recording rules
      rule_files:
        - /etc/prometheus/rules/*.yml
        
      # Alertmanager configuration
      alerting:
        alertmanagers:
          - static_configs:
              - targets: ['alertmanager:9093']
            timeout: 5s
            api_version: v2
            
      # Scrape configurations
      scrape_configs:
        # Kubernetes API server monitoring
        - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          
        # Kubernetes nodes monitoring
        - job_name: 'kubernetes-nodes'
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
              
        # Kubernetes pods monitoring
        - job_name: 'kubernetes-pods'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
              
        # Egyptian Map of Pi services monitoring
        - job_name: 'egyptian-map-pi-services'
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_label_part_of]
              regex: egyptian-map-pi
              action: keep
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
              
        # Security metrics collection
        - job_name: 'security-metrics'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_security_monitoring]
              action: keep
              regex: true
              
# 2. Prometheus StatefulSet for high availability
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: prometheus
    namespace: monitoring
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring
  spec:
    serviceName: prometheus
    replicas: 2  # High availability with 2 replicas
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
          part-of: egyptian-map-pi
          component: monitoring
      spec:
        serviceAccountName: prometheus
        securityContext:
          fsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        containers:
        - name: prometheus
          image: quay.io/prometheus/prometheus:v2.45.0  # Specified version
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=15d"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
              name: http
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: 1000m
              memory: 4Gi
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: storage
              mountPath: /prometheus
        volumes:
          - name: config
            configMap:
              name: prometheus-config
    volumeClaimTemplates:
      - metadata:
          name: storage
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
              
# 3. Prometheus Service for cluster access
- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus
    namespace: monitoring
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
  spec:
    ports:
      - port: 9090
        targetPort: 9090
        protocol: TCP
        name: http
    selector:
      app: prometheus
    type: ClusterIP

# 4. ServiceAccount for Prometheus
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
    namespace: monitoring
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring

# 5. ClusterRole for Prometheus permissions
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: prometheus
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring
  rules:
    - apiGroups: [""]
      resources:
        - nodes
        - nodes/proxy
        - services
        - endpoints
        - pods
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions"]
      resources:
        - ingresses
      verbs: ["get", "list", "watch"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]

# 6. ClusterRoleBinding for Prometheus
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: prometheus
    labels:
      app: prometheus
      part-of: egyptian-map-pi
      component: monitoring
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: prometheus
  subjects:
    - kind: ServiceAccount
      name: prometheus
      namespace: monitoring